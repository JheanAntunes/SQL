- SHOW - exibir

- CREATE - criar

USE - entrar no database

DESC - visualizar colunas da tabela

SELECT - Usado para consultar e recuperar dados de uma tabela.
 Nested Query 

INSERT INTO - Insere novos dados em uma tabela.

UPDATE - Atualiza dados existentes em uma tabela.

DELETE - Remove dados de uma tabela.

CREATE TABLE - Cria uma nova tabela no banco de dados.

DROP TABLE - Remove uma tabela do banco de dados.

ALTER TABLE - Modifica a estrutura de uma tabela existente (por exemplo, adicionando ou removendo colunas).

JOIN - Combina registros de duas ou mais tabelas com base em uma condição.

WHERE - A cláusula SQL WHERE é usada para filtrar registros de uma tabela com base em condições específicas. Apenas as tuplas que atendem à condição especificada na cláusula serão retornadas no resultado da consulta.

GROUP BY - Agrupa resultados com base em uma ou mais colunas.

ORDER BY - Ordena os resultados de uma consulta em ordem ascendente ou descendente.

HAVING - Filtra grupos de resultados após o uso do GROUP BY.

CREATE INDEX - Cria um índice para acelerar consultas no banco de dados.

DROP INDEX - Remove índices de uma tabela.

TRUNCATE TABLE - Remove todos os registros de uma tabela, mas preserva sua estrutura.

ALIAS - TABLE | COLUNAS AS APELIDO TEMPORARIO

LIKE
  %: Representa zero ou mais caracteres.
  _: Representa um único caractere.

BETWEEN - É usado para buscar valores dentro de um intervalo (números, data)

UNION
  O operador UNION combina os resultados de duas ou mais consultas, eliminando duplicatas por padrão. Os conjuntos devem ter o mesmo número e tipo de colunas para funcionar.

INTERSECT  
  O operador INTERSECT retorna apenas as linhas que estão presentes em ambas as consultas.

EXCEPT
  O operador EXCEPT retorna as linhas que estão na primeira consulta, mas não estão na segunda.

Keyword IN
  SELECT Nome
  FROM Clientes
  WHERE Cidade IN ('São Paulo', 'Rio de Janeiro', 'Belo Horizonte');
IN com subconsultas:
  SELECT Nome
  FROM Funcionarios
  WHERE DepartamentoID IN (
      SELECT ID
      FROM Departamentos
      WHERE Nome = 'Recursos Humanos'
  );

# Cláusulas
  EXISTS: TRUE se o resultado da consulta aninhada contiver pelo menos uma tupla;

  NOT EXISTS: TRUE se o resultado da consulta aninhada não contiver tuplas;

  UNIQUE: Retornar TRUE se é único;

# ORDER BY
  SELECT nome, idade
  FROM pessoas
  ORDER BY nome;

  SELECT nome, idade, cidade
  FROM pessoas
  ORDER BY idade DESC, nome ASC;

=== Agregaões
# COUNT() no SQL é usada para contar o número de registros em uma consulta

# GROUP BY
  COUNT(), 
  SUM(), 
  AVG(), 
  AX(),
  MIN()

# CASE 
    WHEN <Condition> THEN 'Value' 
    WHEN <Condition> THEN 'Value' 
    ELSE 'Default' 
  END as name_of_attribute

#Tipos de JOIN:
  INNER JOIN (ou simplesmente JOIN): Retorna apenas as linhas que têm correspondência em ambas as tabelas.
  `
    SELECT A.coluna1, B.coluna2
    FROM tabelaA A
    INNER JOIN tabelaB B
    ON A.chave = B.chave;
  `
  LEFT JOIN (ou LEFT OUTER JOIN): Retorna todas as linhas da tabela à esquerda (A), mesmo que não haja correspondência na tabela à direita (B). Linhas sem correspondência em B terão valores NULL.
  `
    SELECT A.coluna1, B.coluna2
    FROM tabelaA A
    LEFT JOIN tabelaB B
    ON A.chave = B.chave;
  `
  RIGHT JOIN (ou RIGHT OUTER JOIN): Retorna todas as linhas da tabela à direita (B), mesmo que não haja correspondência na tabela à esquerda (A). Linhas sem correspondência em A terão valores NULL.
  `
    SELECT A.coluna1, B.coluna2
    FROM tabelaA A
    RIGHT JOIN tabelaB B
    ON A.chave = B.chave;
  `

# VIEW
  
  CREATE VIEW [db_name.] view_name [(column_list)] AS select-statement [1]

  -- Criando uma view chamada "clientes_ativos"
  CREATE VIEW clientes_ativos AS
  SELECT nome, email
  FROM clientes
  WHERE status = 'ativo';

  -- Usando a view
  SELECT * FROM clientes_ativos;

  Nesse exemplo, criamos uma view chamada , que exibe apenas os clientes com status ativo. Toda vez que consultamos , estamos executando a lógica definida pela view

  Para modificar uma view existente:
    CREATE OR REPLACE VIEW clientes_ativos AS
    SELECT nome, email, telefone
    FROM clientes
    WHERE status = 'ativo';

  Para excluir uma view:
    DROP VIEW clientes_ativos;